{-# LANGUAGE DeriveGeneric #-}

module Upcast.Infra.NixTypes where

--
-- This file is autogenerated. Do not edit. I'm sorry.
--

import GHC.Generics
import Control.Applicative
import Data.Char (toLower)
import Data.Hashable (Hashable(..))
import Data.Text (Text)
import Data.Map.Strict (Map, foldlWithKey)
import Data.Aeson
import Data.Aeson.Types

type Attrs = Map Text

data AccessLog = AccessLog
     { accessLog_emitInterval :: Integer
     , accessLog_enable :: Bool
     , accessLog_s3BucketName :: Text
     , accessLog_s3BucketPrefix :: Text
     } deriving (Show, Generic)

instance FromJSON AccessLog where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 10 }

instance Hashable AccessLog

data Autoscalinggroup = Autoscalinggroup
     { autoscalinggroup_accessKeyId :: Text
     , autoscalinggroup_healthcheckGracePeriod :: Integer
     , autoscalinggroup_healthcheckType :: Maybe HealthcheckType
     , autoscalinggroup_launchConfiguration :: InfraRef Launchconfiguration
     , autoscalinggroup_loadBalancers :: [InfraRef Elb]
     , autoscalinggroup_name :: Text
     , autoscalinggroup_region :: Text
     , autoscalinggroup_subnets :: [InfraRef Ec2subnet]
     , autoscalinggroup_tag :: [Tag]
     , autoscalinggroup_zone :: Text
     } deriving (Show, Generic)

instance FromJSON Autoscalinggroup where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 17 }

instance Hashable Autoscalinggroup

data Autoscalingoptions = Autoscalingoptions
     { autoscalingoptions_autoScalingGroup :: InfraRef Autoscalinggroup
     , autoscalingoptions_maxSize :: Integer
     , autoscalingoptions_minSize :: Integer
     } deriving (Show, Generic)

instance FromJSON Autoscalingoptions where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 19 }

instance Hashable Autoscalingoptions

data BlockDeviceMapping = BlockDeviceMapping
     { blockDeviceMapping_blockDeviceMappingName :: Text
     , blockDeviceMapping_disk :: InfraRef Ebs
     , blockDeviceMapping_fsType :: Text
     } deriving (Show, Generic)

instance FromJSON BlockDeviceMapping where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 19 }

instance Hashable BlockDeviceMapping

data ConnectionDraining = ConnectionDraining
     { connectionDraining_enable :: Bool
     , connectionDraining_timeout :: Integer
     } deriving (Show, Generic)

instance FromJSON ConnectionDraining where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 19 }

instance Hashable ConnectionDraining

data Ebs = Ebs
     { ebs_accessKeyId :: Text
     , ebs_name :: Text
     , ebs_region :: Text
     , ebs_size :: Integer
     , ebs_snapshot :: Maybe Text
     , ebs_volumeType :: VolumeType
     , ebs_zone :: Text
     } deriving (Show, Generic)

instance FromJSON Ebs where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 4 }

instance Hashable Ebs

data Ec2instance = Ec2instance
     { ec2instance_accessKeyId :: Text
     , ec2instance_ami :: Text
     , ec2instance_blockDeviceMapping :: Attrs BlockDeviceMapping
     , ec2instance_ebsBoot :: Bool
     , ec2instance_ebsOptimized :: Bool
     , ec2instance_instanceProfileARN :: Maybe Text
     , ec2instance_instanceType :: Text
     , ec2instance_keyPair :: InfraRef Ec2keypair
     , ec2instance_name :: Text
     , ec2instance_region :: Text
     , ec2instance_securityGroups :: [InfraRef Ec2sg]
     , ec2instance_subnet :: Maybe (InfraRef Ec2subnet)
     , ec2instance_userData :: Attrs Text
     , ec2instance_zone :: Text
     } deriving (Show, Generic)

instance FromJSON Ec2instance where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 12 }

instance Hashable Ec2instance

data Ec2keypair = Ec2keypair
     { ec2keypair_accessKeyId :: Text
     , ec2keypair_name :: Text
     , ec2keypair_privateKeyFile :: Text
     , ec2keypair_region :: Text
     } deriving (Show, Generic)

instance FromJSON Ec2keypair where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 11 }

instance Hashable Ec2keypair

data Ec2sg = Ec2sg
     { ec2sg_accessKeyId :: Text
     , ec2sg_description :: Text
     , ec2sg_name :: Text
     , ec2sg_region :: Text
     , ec2sg_vpc :: Maybe (InfraRef Ec2vpc)
     } deriving (Show, Generic)

instance FromJSON Ec2sg where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 6 }

instance Hashable Ec2sg

data Ec2sgruleset = Ec2sgruleset
     { ec2sgruleset_rules :: [Rule]
     , ec2sgruleset_securityGroup :: InfraRef Ec2sg
     } deriving (Show, Generic)

instance FromJSON Ec2sgruleset where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 13 }

instance Hashable Ec2sgruleset

data Ec2subnet = Ec2subnet
     { ec2subnet_accessKeyId :: Text
     , ec2subnet_cidrBlock :: Text
     , ec2subnet_name :: Text
     , ec2subnet_region :: Text
     , ec2subnet_vpc :: InfraRef Ec2vpc
     , ec2subnet_zone :: Text
     } deriving (Show, Generic)

instance FromJSON Ec2subnet where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 10 }

instance Hashable Ec2subnet

data Ec2vpc = Ec2vpc
     { ec2vpc_accessKeyId :: Text
     , ec2vpc_cidrBlock :: Text
     , ec2vpc_region :: Text
     } deriving (Show, Generic)

instance FromJSON Ec2vpc where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 7 }

instance Hashable Ec2vpc

data Elb = Elb
     { elb_accessKeyId :: Text
     , elb_accessLog :: AccessLog
     , elb_connectionDraining :: ConnectionDraining
     , elb_crossZoneLoadBalancing :: Bool
     , elb_healthCheck :: HealthCheck
     , elb_internal :: Bool
     , elb_listeners :: [Listener]
     , elb_name :: Text
     , elb_region :: Text
     , elb_route53Aliases :: Attrs Route53Alias
     , elb_securityGroups :: [InfraRef Ec2sg]
     , elb_subnets :: [InfraRef Ec2subnet]
     } deriving (Show, Generic)

instance FromJSON Elb where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 4 }

instance Hashable Elb

data Elbinstanceset = Elbinstanceset
     { elbinstanceset_elb :: InfraRef Elb
     , elbinstanceset_instances :: [InfraRef Ec2instance]
     } deriving (Show, Generic)

instance FromJSON Elbinstanceset where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 15 }

instance Hashable Elbinstanceset

data HealthCheck = HealthCheck
     { healthCheck_healthyThreshold :: Integer
     , healthCheck_interval :: Integer
     , healthCheck_target :: Target
     , healthCheck_timeout :: Integer
     , healthCheck_unhealthyThreshold :: Integer
     } deriving (Show, Generic)

instance FromJSON HealthCheck where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 12 }

instance Hashable HealthCheck

data HealthCheckPathTarget = HealthCheckPathTarget
     { healthCheckPathTarget_path :: Text
     , healthCheckPathTarget_port :: Integer
     } deriving (Show, Generic)

instance FromJSON HealthCheckPathTarget where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 22 }

instance Hashable HealthCheckPathTarget

data HealthcheckType = EC2 | ELB deriving (Show, Generic)

instance FromJSON HealthcheckType where
  parseJSON (String "EC2") = pure EC2
  parseJSON (String "ELB") = pure ELB
  parseJSON _ = empty

instance Hashable HealthcheckType

data Launchconfiguration = Launchconfiguration
     { launchconfiguration_accessKeyId :: Text
     , launchconfiguration_ami :: Text
     , launchconfiguration_associatePublicIPAddress :: Bool
     , launchconfiguration_ebsOptimized :: Bool
     , launchconfiguration_instanceProfileARN :: Maybe Text
     , launchconfiguration_instanceType :: Text
     , launchconfiguration_keyName :: Maybe (InfraRef Ec2keypair)
     , launchconfiguration_prefix :: Text
     , launchconfiguration_region :: Text
     , launchconfiguration_securityGroups :: [InfraRef Ec2sg]
     , launchconfiguration_zone :: Text
     } deriving (Show, Generic)

instance FromJSON Launchconfiguration where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 20 }

instance Hashable Launchconfiguration

data Listener = Listener
     { listener_instancePort :: Integer
     , listener_instanceProtocol :: Text
     , listener_lbPort :: Integer
     , listener_lbProtocol :: Text
     , listener_sslCertificateId :: Text
     , listener_stickiness :: Maybe Stickiness
     } deriving (Show, Generic)

instance FromJSON Listener where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 9 }

instance Hashable Listener

data Route53Alias = Route53Alias
     { route53Alias_name :: Text
     , route53Alias_zoneId :: Text
     } deriving (Show, Generic)

instance FromJSON Route53Alias where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 13 }

instance Hashable Route53Alias

data Rule = Rule
     { rule_fromPort :: Maybe Integer
     , rule_protocol :: Text
     , rule_sourceGroupName :: Maybe Text
     , rule_sourceGroupOwnerId :: Maybe Text
     , rule_sourceIp :: Maybe Text
     , rule_toPort :: Maybe Integer
     } deriving (Show, Generic)

instance FromJSON Rule where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 5 }

instance Hashable Rule

data Stickiness = App Text | Lb (Maybe Integer) deriving (Show, Generic)

instance FromJSON Stickiness where
  parseJSON = genericParseJSON defaultOptions
              { sumEncoding = ObjectWithSingleField
              , constructorTagModifier = map toLower }

instance Hashable Stickiness

data Tag = Tag
     { tag_key :: Text
     , tag_propagateAtLaunch :: Bool
     , tag_value :: Text
     } deriving (Show, Generic)

instance FromJSON Tag where
  parseJSON = genericParseJSON defaultOptions
              { fieldLabelModifier = drop 4 }

instance Hashable Tag

data Target = Http HealthCheckPathTarget | Https HealthCheckPathTarget | Ssl Integer | Tcp Integer deriving (Show, Generic)

instance FromJSON Target where
  parseJSON = genericParseJSON defaultOptions
              { sumEncoding = ObjectWithSingleField
              , constructorTagModifier = map toLower }

instance Hashable Target

data VolumeType = Gp2 | Iop Integer | Standard deriving (Show, Generic)

instance FromJSON VolumeType where
  parseJSON = genericParseJSON defaultOptions
              { sumEncoding = ObjectWithSingleField
              , constructorTagModifier = map toLower }

instance Hashable VolumeType


instance (Hashable a, Hashable b) => Hashable (Map a b) where
  hashWithSalt = foldlWithKey (\b k v -> hashWithSalt b (k,v))

data InfraRef a = RefLocal Text | RefRemote Text deriving (Show, Generic)

instance FromJSON (InfraRef a) where
  parseJSON (Object o) =
    (RefLocal <$> o .: "local") <|>
    (RefRemote <$> o .: "remote")
  parseJSON _ = empty

instance Hashable (InfraRef a)
